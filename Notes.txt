priority queue is sorted by price and order side

Read orders from the input file.
For each order:
	Check the validity of the order.
	If the order is valid, process it against the order book for the corresponding instrument.
	If the order is not fully executed, add it to the order book.
	Write the order execution report to the output file.
	
When processing an order, the algorithm first checks if there are any orders in the order book that can be matched with the incoming order. 
If there are, the algorithm executes the orders as much as possible until one of the following conditions is met:
	The incoming order is fully executed.
	There are no more orders in the order book that can be matched with the incoming order.
If the incoming order is not fully executed, it is added to the order book. The order book is a priority queue, so the order will be executed as soon as possible.






***Classes Identified***

Class   -   Description     -      Usage
	
Order	
	Represents an order with attributes like order ID, instrument, side, quantity, and price.	
		Stores and manages order data, performs validity checks, executes order matches, and generates order execution reports.
	
Compare	
	Defines a comparison function for orders, considering price and order side.	
		Used to sort orders in priority queues based on their priority.
	
OrderBook	
	Represents an order book for a specific instrument, maintaining a priority queue of orders.	
		Processes incoming orders against the order book, executing matches and updating order statuses.







***OrderMatchingAlgorithm***

PriceMatch -
	priritize
		high for buy order
		low for sell order

SideMatch -
	Buy with sell

TimePriority -

PartialMatching -
	if	Incoming Order > Matching Order => Partial Execution
		(Remains in Order Book)
		
OrderBookUpdate -
	Matching orders -> status update -> current state





***   ***
Order and OrderBook

An Order object represents a single order with its associated attributes.
An OrderBook object manages the orders for a specific instrument, maintaining a priority queue of Order objects.
When processing an incoming order, the code interacts with the OrderBook to match it with existing orders and update order statuses.
The Order class provides methods for order manipulation, such as checking validity, executing matches, and generating execution reports.
The OrderBook class handles the order book maintenance, including adding new orders, executing matches, and updating order priorities.

Order and Compare

An Order object is compared to other Order objects using the Compare class.
The Compare class defines a comparison function that considers price and order side to determine order priority.
When sorting orders in a priority queue, the code utilizes the Compare class to determine the order of insertion.
The Order class does not directly interact with the Compare class; instead, the comparison is performed externally when orders are compared.

OrderBook and Compare

An OrderBook object maintains a priority queue of Order objects, using the Compare class for order comparison.
The OrderBook class utilizes the Compare class when sorting orders in the priority queue.
The Compare class provides the comparison logic for the OrderBook, ensuring that orders are sorted based on their priority.

In summary, the Order class represents the individual orders, the OrderBook class manages the order books for specific instruments, 
and the Compare class provides the order comparison logic for both classes. T
his collaboration enables the code to effectively process orders and maintain the order books according to the order matching rules..